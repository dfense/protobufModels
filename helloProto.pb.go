// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloProto.proto

package gRPCtemplate

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SmartCastCommand int32

const (
	SmartCastCommand_UNKNOWN                     SmartCastCommand = 0
	SmartCastCommand_PING                        SmartCastCommand = 1
	SmartCastCommand_GETALLSWNIS                 SmartCastCommand = 2
	SmartCastCommand_GETSWNI                     SmartCastCommand = 3
	SmartCastCommand_IDENTIFY                    SmartCastCommand = 4
	SmartCastCommand_GET_MY_NETWORK              SmartCastCommand = 5
	SmartCastCommand_LIST_ALL_NETWORKS           SmartCastCommand = 6
	SmartCastCommand_NETWORK_RESET               SmartCastCommand = 7
	SmartCastCommand_GET_MODE                    SmartCastCommand = 8
	SmartCastCommand_ACTUATOR                    SmartCastCommand = 9
	SmartCastCommand_GET_DEVICE_TABLE            SmartCastCommand = 10
	SmartCastCommand_REFRESH_DEVICE_TABLE        SmartCastCommand = 11
	SmartCastCommand_SET_DHB_CONFIG              SmartCastCommand = 12
	SmartCastCommand_DATA_HEARTBEAT              SmartCastCommand = 13
	SmartCastCommand_GET_POWER                   SmartCastCommand = 14
	SmartCastCommand_REBOOT                      SmartCastCommand = 15
	SmartCastCommand_SET_CHANNEL                 SmartCastCommand = 16
	SmartCastCommand_FIRMWARE_UPDATE             SmartCastCommand = 17
	SmartCastCommand_SET_PAN_ID                  SmartCastCommand = 18
	SmartCastCommand_SET_LED_PATTERN             SmartCastCommand = 19
	SmartCastCommand_AUTO_ADDRESS                SmartCastCommand = 20
	SmartCastCommand_GET_DHB_CONFIG              SmartCastCommand = 21
	SmartCastCommand_GET_NODE_COUNT              SmartCastCommand = 22
	SmartCastCommand_OP_MODE_EVENT               SmartCastCommand = 23
	SmartCastCommand_SET_DEV_CONFIG              SmartCastCommand = 24
	SmartCastCommand_GET_DEV_CONFIG              SmartCastCommand = 25
	SmartCastCommand_APPLY_SCENE                 SmartCastCommand = 26
	SmartCastCommand_APPLY_DYNAMIC_PROFILE       SmartCastCommand = 27
	SmartCastCommand_GET_LIGHTING_STATUS         SmartCastCommand = 28
	SmartCastCommand_SWG_TEST                    SmartCastCommand = 29
	SmartCastCommand_SET_DYNAMIC_PROFILE_ID      SmartCastCommand = 30
	SmartCastCommand_TOGGLE                      SmartCastCommand = 31
	SmartCastCommand_PAUSE_PROFILES              SmartCastCommand = 32
	SmartCastCommand_GET_DYNAMIC_LIGHTING_STATUS SmartCastCommand = 33
	//offset spacing
	SmartCastCommand_DATA_HEARTBEAT_0 SmartCastCommand = 1000
	SmartCastCommand_DATA_HEARTBEAT_1 SmartCastCommand = 1001
	SmartCastCommand_DATA_HEARTBEAT_2 SmartCastCommand = 1002
	SmartCastCommand_DATA_HEARTBEAT_3 SmartCastCommand = 1003
	SmartCastCommand_DATA_HEARTBEAT_4 SmartCastCommand = 1004
	SmartCastCommand_DATA_HEARTBEAT_5 SmartCastCommand = 1005
	SmartCastCommand_DATA_HEARTBEAT_6 SmartCastCommand = 1006
	SmartCastCommand_DATA_HEARTBEAT_7 SmartCastCommand = 1007
)

var SmartCastCommand_name = map[int32]string{
	0:    "UNKNOWN",
	1:    "PING",
	2:    "GETALLSWNIS",
	3:    "GETSWNI",
	4:    "IDENTIFY",
	5:    "GET_MY_NETWORK",
	6:    "LIST_ALL_NETWORKS",
	7:    "NETWORK_RESET",
	8:    "GET_MODE",
	9:    "ACTUATOR",
	10:   "GET_DEVICE_TABLE",
	11:   "REFRESH_DEVICE_TABLE",
	12:   "SET_DHB_CONFIG",
	13:   "DATA_HEARTBEAT",
	14:   "GET_POWER",
	15:   "REBOOT",
	16:   "SET_CHANNEL",
	17:   "FIRMWARE_UPDATE",
	18:   "SET_PAN_ID",
	19:   "SET_LED_PATTERN",
	20:   "AUTO_ADDRESS",
	21:   "GET_DHB_CONFIG",
	22:   "GET_NODE_COUNT",
	23:   "OP_MODE_EVENT",
	24:   "SET_DEV_CONFIG",
	25:   "GET_DEV_CONFIG",
	26:   "APPLY_SCENE",
	27:   "APPLY_DYNAMIC_PROFILE",
	28:   "GET_LIGHTING_STATUS",
	29:   "SWG_TEST",
	30:   "SET_DYNAMIC_PROFILE_ID",
	31:   "TOGGLE",
	32:   "PAUSE_PROFILES",
	33:   "GET_DYNAMIC_LIGHTING_STATUS",
	1000: "DATA_HEARTBEAT_0",
	1001: "DATA_HEARTBEAT_1",
	1002: "DATA_HEARTBEAT_2",
	1003: "DATA_HEARTBEAT_3",
	1004: "DATA_HEARTBEAT_4",
	1005: "DATA_HEARTBEAT_5",
	1006: "DATA_HEARTBEAT_6",
	1007: "DATA_HEARTBEAT_7",
}

var SmartCastCommand_value = map[string]int32{
	"UNKNOWN":                     0,
	"PING":                        1,
	"GETALLSWNIS":                 2,
	"GETSWNI":                     3,
	"IDENTIFY":                    4,
	"GET_MY_NETWORK":              5,
	"LIST_ALL_NETWORKS":           6,
	"NETWORK_RESET":               7,
	"GET_MODE":                    8,
	"ACTUATOR":                    9,
	"GET_DEVICE_TABLE":            10,
	"REFRESH_DEVICE_TABLE":        11,
	"SET_DHB_CONFIG":              12,
	"DATA_HEARTBEAT":              13,
	"GET_POWER":                   14,
	"REBOOT":                      15,
	"SET_CHANNEL":                 16,
	"FIRMWARE_UPDATE":             17,
	"SET_PAN_ID":                  18,
	"SET_LED_PATTERN":             19,
	"AUTO_ADDRESS":                20,
	"GET_DHB_CONFIG":              21,
	"GET_NODE_COUNT":              22,
	"OP_MODE_EVENT":               23,
	"SET_DEV_CONFIG":              24,
	"GET_DEV_CONFIG":              25,
	"APPLY_SCENE":                 26,
	"APPLY_DYNAMIC_PROFILE":       27,
	"GET_LIGHTING_STATUS":         28,
	"SWG_TEST":                    29,
	"SET_DYNAMIC_PROFILE_ID":      30,
	"TOGGLE":                      31,
	"PAUSE_PROFILES":              32,
	"GET_DYNAMIC_LIGHTING_STATUS": 33,
	"DATA_HEARTBEAT_0":            1000,
	"DATA_HEARTBEAT_1":            1001,
	"DATA_HEARTBEAT_2":            1002,
	"DATA_HEARTBEAT_3":            1003,
	"DATA_HEARTBEAT_4":            1004,
	"DATA_HEARTBEAT_5":            1005,
	"DATA_HEARTBEAT_6":            1006,
	"DATA_HEARTBEAT_7":            1007,
}

func (x SmartCastCommand) String() string {
	return proto.EnumName(SmartCastCommand_name, int32(x))
}

func (SmartCastCommand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{0}
}

// The request message containing the user's name.
type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The echo request
type EchoRequest struct {
	Erequest             int32    `protobuf:"varint,1,opt,name=erequest,proto3" json:"erequest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{2}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetErequest() int32 {
	if m != nil {
		return m.Erequest
	}
	return 0
}

type EchoReply struct {
	Ereply               int32    `protobuf:"varint,1,opt,name=ereply,proto3" json:"ereply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoReply) Reset()         { *m = EchoReply{} }
func (m *EchoReply) String() string { return proto.CompactTextString(m) }
func (*EchoReply) ProtoMessage()    {}
func (*EchoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{3}
}

func (m *EchoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoReply.Unmarshal(m, b)
}
func (m *EchoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoReply.Marshal(b, m, deterministic)
}
func (m *EchoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoReply.Merge(m, src)
}
func (m *EchoReply) XXX_Size() int {
	return xxx_messageInfo_EchoReply.Size(m)
}
func (m *EchoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoReply.DiscardUnknown(m)
}

var xxx_messageInfo_EchoReply proto.InternalMessageInfo

func (m *EchoReply) GetEreply() int32 {
	if m != nil {
		return m.Ereply
	}
	return 0
}

type PingRequest struct {
	MessageId            int32    `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	PingCnt              int32    `protobuf:"varint,2,opt,name=pingCnt,proto3" json:"pingCnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{4}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *PingRequest) GetPingCnt() int32 {
	if m != nil {
		return m.PingCnt
	}
	return 0
}

type PongReply struct {
	MessageId            int32    `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	PongCnt              int32    `protobuf:"varint,2,opt,name=pongCnt,proto3" json:"pongCnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PongReply) Reset()         { *m = PongReply{} }
func (m *PongReply) String() string { return proto.CompactTextString(m) }
func (*PongReply) ProtoMessage()    {}
func (*PongReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{5}
}

func (m *PongReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PongReply.Unmarshal(m, b)
}
func (m *PongReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PongReply.Marshal(b, m, deterministic)
}
func (m *PongReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PongReply.Merge(m, src)
}
func (m *PongReply) XXX_Size() int {
	return xxx_messageInfo_PongReply.Size(m)
}
func (m *PongReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PongReply.DiscardUnknown(m)
}

var xxx_messageInfo_PongReply proto.InternalMessageInfo

func (m *PongReply) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *PongReply) GetPongCnt() int32 {
	if m != nil {
		return m.PongCnt
	}
	return 0
}

type SmartCastRequest struct {
	NetworkID            []string         `protobuf:"bytes,1,rep,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	SCCommand            SmartCastCommand `protobuf:"varint,2,opt,name=SCCommand,proto3,enum=gRPCtemplate.SmartCastCommand" json:"SCCommand,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SmartCastRequest) Reset()         { *m = SmartCastRequest{} }
func (m *SmartCastRequest) String() string { return proto.CompactTextString(m) }
func (*SmartCastRequest) ProtoMessage()    {}
func (*SmartCastRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{6}
}

func (m *SmartCastRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmartCastRequest.Unmarshal(m, b)
}
func (m *SmartCastRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmartCastRequest.Marshal(b, m, deterministic)
}
func (m *SmartCastRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartCastRequest.Merge(m, src)
}
func (m *SmartCastRequest) XXX_Size() int {
	return xxx_messageInfo_SmartCastRequest.Size(m)
}
func (m *SmartCastRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartCastRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SmartCastRequest proto.InternalMessageInfo

func (m *SmartCastRequest) GetNetworkID() []string {
	if m != nil {
		return m.NetworkID
	}
	return nil
}

func (m *SmartCastRequest) GetSCCommand() SmartCastCommand {
	if m != nil {
		return m.SCCommand
	}
	return SmartCastCommand_UNKNOWN
}

type SmartCastResponse struct {
	NetworkID            string           `protobuf:"bytes,1,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	MID                  int32            `protobuf:"varint,2,opt,name=MID,proto3" json:"MID,omitempty"`
	SmartcastCommand     SmartCastCommand `protobuf:"varint,3,opt,name=smartcastCommand,proto3,enum=gRPCtemplate.SmartCastCommand" json:"smartcastCommand,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SmartCastResponse) Reset()         { *m = SmartCastResponse{} }
func (m *SmartCastResponse) String() string { return proto.CompactTextString(m) }
func (*SmartCastResponse) ProtoMessage()    {}
func (*SmartCastResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{7}
}

func (m *SmartCastResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmartCastResponse.Unmarshal(m, b)
}
func (m *SmartCastResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmartCastResponse.Marshal(b, m, deterministic)
}
func (m *SmartCastResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartCastResponse.Merge(m, src)
}
func (m *SmartCastResponse) XXX_Size() int {
	return xxx_messageInfo_SmartCastResponse.Size(m)
}
func (m *SmartCastResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartCastResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SmartCastResponse proto.InternalMessageInfo

func (m *SmartCastResponse) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

func (m *SmartCastResponse) GetMID() int32 {
	if m != nil {
		return m.MID
	}
	return 0
}

func (m *SmartCastResponse) GetSmartcastCommand() SmartCastCommand {
	if m != nil {
		return m.SmartcastCommand
	}
	return SmartCastCommand_UNKNOWN
}

type CreeResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreeResponse) Reset()         { *m = CreeResponse{} }
func (m *CreeResponse) String() string { return proto.CompactTextString(m) }
func (*CreeResponse) ProtoMessage()    {}
func (*CreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6dfd7d8c95606e, []int{8}
}

func (m *CreeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreeResponse.Unmarshal(m, b)
}
func (m *CreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreeResponse.Marshal(b, m, deterministic)
}
func (m *CreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreeResponse.Merge(m, src)
}
func (m *CreeResponse) XXX_Size() int {
	return xxx_messageInfo_CreeResponse.Size(m)
}
func (m *CreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreeResponse proto.InternalMessageInfo

func (m *CreeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterEnum("gRPCtemplate.SmartCastCommand", SmartCastCommand_name, SmartCastCommand_value)
	proto.RegisterType((*HelloRequest)(nil), "gRPCtemplate.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "gRPCtemplate.HelloReply")
	proto.RegisterType((*EchoRequest)(nil), "gRPCtemplate.EchoRequest")
	proto.RegisterType((*EchoReply)(nil), "gRPCtemplate.EchoReply")
	proto.RegisterType((*PingRequest)(nil), "gRPCtemplate.PingRequest")
	proto.RegisterType((*PongReply)(nil), "gRPCtemplate.PongReply")
	proto.RegisterType((*SmartCastRequest)(nil), "gRPCtemplate.SmartCastRequest")
	proto.RegisterType((*SmartCastResponse)(nil), "gRPCtemplate.SmartCastResponse")
	proto.RegisterType((*CreeResponse)(nil), "gRPCtemplate.CreeResponse")
}

func init() {
	proto.RegisterFile("helloProto.proto", fileDescriptor_cd6dfd7d8c95606e)
}

var fileDescriptor_cd6dfd7d8c95606e = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0xb5, 0x62, 0x47, 0x97, 0x91, 0x62, 0x8f, 0xd7, 0x37, 0x59, 0x49, 0x63, 0x97, 0x05, 0x02,
	0xb7, 0x0f, 0x46, 0xaa, 0xf4, 0xf2, 0x92, 0x87, 0xae, 0xc8, 0x15, 0xc5, 0x86, 0x5a, 0x12, 0xbb,
	0x2b, 0x0b, 0x46, 0x1f, 0x08, 0xd5, 0x61, 0x65, 0xa3, 0x12, 0xa5, 0x8a, 0x0c, 0x82, 0xfc, 0x40,
	0x5f, 0xfb, 0x5f, 0xfd, 0x92, 0xde, 0xfb, 0x0b, 0xc5, 0x52, 0xa4, 0x2e, 0xae, 0x82, 0xf6, 0xc5,
	0xde, 0x39, 0x73, 0xe6, 0xcc, 0xe1, 0x2c, 0x34, 0x0b, 0x78, 0x1b, 0x8e, 0x46, 0x13, 0x7f, 0x36,
	0x49, 0x26, 0x97, 0x53, 0xfd, 0x97, 0xd4, 0x86, 0xc2, 0x37, 0x93, 0x70, 0x3c, 0x1d, 0x0d, 0x92,
	0xd0, 0x30, 0xa0, 0xd6, 0xd1, 0x0c, 0x11, 0xfe, 0xf0, 0x26, 0x8c, 0x13, 0x42, 0x60, 0x27, 0x1a,
	0x8c, 0xc3, 0x7a, 0xe1, 0xbc, 0x70, 0x51, 0x11, 0xe9, 0xd9, 0x78, 0x06, 0x90, 0x71, 0xa6, 0xa3,
	0x77, 0xa4, 0x0e, 0xa5, 0x71, 0x18, 0xc7, 0x83, 0x61, 0x4e, 0xca, 0x43, 0xe3, 0x63, 0xa8, 0xb2,
	0x9b, 0xdb, 0x85, 0x54, 0x03, 0xca, 0xe1, 0x6c, 0x7e, 0x4e, 0x99, 0x0f, 0xc5, 0x22, 0x36, 0x3e,
	0x82, 0xca, 0x9c, 0xaa, 0x15, 0x8f, 0xa1, 0x18, 0xce, 0xf4, 0x29, 0xa3, 0x65, 0x91, 0xc1, 0xa0,
	0xea, 0xdf, 0x45, 0xc3, 0x5c, 0xef, 0x09, 0x54, 0xb2, 0x4e, 0xce, 0xeb, 0x8c, 0xb9, 0x04, 0xb4,
	0xad, 0xe9, 0x5d, 0x34, 0x34, 0xa3, 0xa4, 0xfe, 0x20, 0xcd, 0xe5, 0xa1, 0x61, 0x42, 0xc5, 0x9f,
	0x68, 0x19, 0xdd, 0xeb, 0xbf, 0x45, 0x26, 0xeb, 0x22, 0xf3, 0xd0, 0x88, 0x00, 0xe5, 0x78, 0x30,
	0x4b, 0xcc, 0x41, 0x9c, 0xac, 0x18, 0xe2, 0x61, 0xf2, 0x76, 0x32, 0xfb, 0xde, 0xb1, 0xea, 0x85,
	0xf3, 0xed, 0x8b, 0x8a, 0x58, 0x02, 0xe4, 0x25, 0x54, 0xa4, 0x69, 0x4e, 0xc6, 0xe3, 0x41, 0xf4,
	0x3a, 0x55, 0xdb, 0x6d, 0x3e, 0xbd, 0x5c, 0x9d, 0xfd, 0xe5, 0x42, 0x30, 0x63, 0x89, 0x65, 0x81,
	0xf1, 0x53, 0x01, 0xf6, 0x57, 0x1a, 0xc6, 0xd3, 0x49, 0x14, 0x87, 0xf7, 0x3b, 0x16, 0xd6, 0x3b,
	0x22, 0x6c, 0x77, 0x1d, 0x2b, 0x73, 0xae, 0x8f, 0xe4, 0x6b, 0xc0, 0x58, 0x8b, 0xdc, 0x2c, 0x9b,
	0xd4, 0xb7, 0xff, 0x97, 0x95, 0x7f, 0xd5, 0x19, 0xcf, 0xa0, 0x66, 0xce, 0xc2, 0x70, 0xe1, 0xe5,
	0x18, 0x8a, 0x71, 0x32, 0x48, 0xde, 0xc4, 0xf9, 0xad, 0xcd, 0xa3, 0x4f, 0x7e, 0x2e, 0xae, 0x8c,
	0x2a, 0x2b, 0x26, 0x55, 0x28, 0xf5, 0xf8, 0x2b, 0xee, 0xf5, 0x39, 0x6e, 0x91, 0x32, 0xec, 0xf8,
	0x0e, 0xb7, 0xb1, 0x40, 0xf6, 0xa0, 0x6a, 0x33, 0x45, 0x5d, 0x57, 0xf6, 0xb9, 0x23, 0xf1, 0x81,
	0xe6, 0xd9, 0x4c, 0xe9, 0x08, 0xb7, 0x49, 0x0d, 0xca, 0x8e, 0xc5, 0xb8, 0x72, 0xda, 0xd7, 0xb8,
	0x43, 0x08, 0xec, 0xda, 0x4c, 0x05, 0xdd, 0xeb, 0x80, 0x33, 0xd5, 0xf7, 0xc4, 0x2b, 0x7c, 0x48,
	0x8e, 0x60, 0xdf, 0x75, 0xa4, 0x0a, 0xa8, 0xeb, 0xe6, 0xa8, 0xc4, 0x22, 0xd9, 0x87, 0x47, 0x59,
	0x14, 0x08, 0x26, 0x99, 0xc2, 0x92, 0xd6, 0x4a, 0xab, 0x3d, 0x8b, 0x61, 0x59, 0x47, 0xd4, 0x54,
	0x3d, 0xaa, 0x3c, 0x81, 0x15, 0x72, 0x08, 0xa8, 0x73, 0x16, 0xbb, 0x72, 0x4c, 0x16, 0x28, 0xda,
	0x72, 0x19, 0x02, 0xa9, 0xc3, 0xa1, 0x60, 0x6d, 0xc1, 0x64, 0x67, 0x3d, 0x53, 0xd5, 0x4e, 0xa4,
	0xe6, 0x77, 0x5a, 0x81, 0xe9, 0xf1, 0xb6, 0x63, 0x63, 0x4d, 0x63, 0x16, 0x55, 0x34, 0xe8, 0x30,
	0x2a, 0x54, 0x8b, 0x51, 0x85, 0x8f, 0xc8, 0x23, 0xa8, 0x68, 0x5d, 0xdf, 0xeb, 0x33, 0x81, 0xbb,
	0x04, 0xa0, 0x28, 0x58, 0xcb, 0xf3, 0x14, 0xee, 0xe9, 0x0f, 0xd7, 0x12, 0x66, 0x87, 0x72, 0xce,
	0x5c, 0x44, 0x72, 0x00, 0x7b, 0x6d, 0x47, 0x74, 0xfb, 0x54, 0xb0, 0xa0, 0xe7, 0x5b, 0x54, 0x31,
	0xdc, 0x27, 0xbb, 0x00, 0x9a, 0xe5, 0x53, 0x1e, 0x38, 0x16, 0x12, 0x4d, 0xd2, 0xb1, 0xcb, 0xac,
	0xc0, 0xa7, 0x4a, 0x31, 0xc1, 0xf1, 0x80, 0x20, 0xd4, 0x68, 0x4f, 0x79, 0x01, 0xb5, 0x2c, 0xc1,
	0xa4, 0xc4, 0xc3, 0x7c, 0x52, 0x2b, 0xfe, 0x8e, 0x72, 0x8c, 0x7b, 0x16, 0x0b, 0x4c, 0xaf, 0xc7,
	0x15, 0x1e, 0xeb, 0x31, 0x79, 0x7e, 0x3a, 0x92, 0x80, 0x5d, 0x31, 0xae, 0xf0, 0x64, 0xf1, 0x69,
	0xec, 0x2a, 0x2f, 0xad, 0x2f, 0xe4, 0x96, 0xd8, 0xa9, 0xf6, 0x4f, 0x7d, 0xdf, 0xbd, 0x0e, 0xa4,
	0xc9, 0x38, 0xc3, 0x06, 0x39, 0x85, 0xa3, 0x39, 0x60, 0x5d, 0x73, 0xda, 0x75, 0xcc, 0xc0, 0x17,
	0x5e, 0xdb, 0x71, 0x19, 0x3e, 0x26, 0x27, 0x70, 0xa0, 0xeb, 0x5d, 0xc7, 0xee, 0x28, 0x87, 0xdb,
	0x81, 0x54, 0x54, 0xf5, 0x24, 0x3e, 0xd1, 0xb7, 0x20, 0xfb, 0x76, 0xa0, 0x98, 0x54, 0xf8, 0x01,
	0x69, 0xc0, 0x71, 0xda, 0x7a, 0xbd, 0x5e, 0x7f, 0xf8, 0x53, 0x3d, 0x3a, 0xe5, 0xd9, 0xb6, 0xcb,
	0xf0, 0x4c, 0xdb, 0xf1, 0x69, 0x4f, 0xb2, 0x9c, 0x21, 0xf1, 0x9c, 0x9c, 0xc1, 0x63, 0x7b, 0xa5,
	0xf6, 0x7e, 0xab, 0x0f, 0xc9, 0x11, 0xe0, 0xfa, 0xf5, 0x04, 0xcf, 0xf1, 0x97, 0xd2, 0x06, 0xf8,
	0x53, 0xfc, 0x75, 0x13, 0xdc, 0xc4, 0xdf, 0x36, 0xc1, 0x2f, 0xf0, 0xf7, 0x4d, 0xf0, 0x67, 0xf8,
	0xc7, 0x26, 0xf8, 0x73, 0xfc, 0x73, 0x13, 0xfc, 0x05, 0xfe, 0xb5, 0x09, 0xfe, 0x12, 0xff, 0x2e,
	0x35, 0xbb, 0x50, 0xb2, 0x67, 0x61, 0x98, 0x84, 0x33, 0xd2, 0x82, 0xb2, 0x1c, 0xbc, 0x4b, 0x17,
	0x31, 0x69, 0xac, 0xff, 0x7a, 0x57, 0x37, 0x78, 0xa3, 0xbe, 0x31, 0xa7, 0xf7, 0xe9, 0x56, 0xf3,
	0x3b, 0x28, 0xf5, 0xd4, 0xed, 0x5d, 0x34, 0x8c, 0xc9, 0x37, 0x40, 0xcc, 0x49, 0x14, 0x85, 0x37,
	0x89, 0x7c, 0x1b, 0xdd, 0x99, 0xb7, 0x83, 0x28, 0x0a, 0x47, 0xe4, 0x7d, 0x6b, 0x21, 0x17, 0x3f,
	0x7b, 0x6f, 0x7e, 0xbe, 0x15, 0x8c, 0xad, 0x8b, 0xc2, 0xf3, 0x42, 0xf3, 0xc7, 0x02, 0xec, 0xe8,
	0xfd, 0x4e, 0xbe, 0xca, 0xfe, 0x9f, 0xae, 0xd7, 0xad, 0x3c, 0x13, 0x8d, 0x93, 0x4d, 0xa9, 0xd4,
	0xae, 0x96, 0x22, 0x2f, 0x61, 0x47, 0x3f, 0x02, 0xf7, 0x15, 0x56, 0x1e, 0x86, 0xfb, 0x0a, 0x8b,
	0x65, 0x6f, 0x6c, 0x7d, 0x5b, 0x4c, 0xdf, 0xbc, 0x17, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x67,
	0x1c, 0x6e, 0x86, 0x07, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/gRPCtemplate.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPCtemplate.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCtemplate.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloProto.proto",
}

// UThingsClient is the client API for UThings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UThingsClient interface {
	// stubbed in
	ConnectSwniChannel(ctx context.Context, opts ...grpc.CallOption) (UThings_ConnectSwniChannelClient, error)
}

type uThingsClient struct {
	cc grpc.ClientConnInterface
}

func NewUThingsClient(cc grpc.ClientConnInterface) UThingsClient {
	return &uThingsClient{cc}
}

func (c *uThingsClient) ConnectSwniChannel(ctx context.Context, opts ...grpc.CallOption) (UThings_ConnectSwniChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UThings_serviceDesc.Streams[0], "/gRPCtemplate.UThings/ConnectSwniChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &uThingsConnectSwniChannelClient{stream}
	return x, nil
}

type UThings_ConnectSwniChannelClient interface {
	Send(*SmartCastRequest) error
	Recv() (*SmartCastResponse, error)
	grpc.ClientStream
}

type uThingsConnectSwniChannelClient struct {
	grpc.ClientStream
}

func (x *uThingsConnectSwniChannelClient) Send(m *SmartCastRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uThingsConnectSwniChannelClient) Recv() (*SmartCastResponse, error) {
	m := new(SmartCastResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UThingsServer is the server API for UThings service.
type UThingsServer interface {
	// stubbed in
	ConnectSwniChannel(UThings_ConnectSwniChannelServer) error
}

// UnimplementedUThingsServer can be embedded to have forward compatible implementations.
type UnimplementedUThingsServer struct {
}

func (*UnimplementedUThingsServer) ConnectSwniChannel(srv UThings_ConnectSwniChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectSwniChannel not implemented")
}

func RegisterUThingsServer(s *grpc.Server, srv UThingsServer) {
	s.RegisterService(&_UThings_serviceDesc, srv)
}

func _UThings_ConnectSwniChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UThingsServer).ConnectSwniChannel(&uThingsConnectSwniChannelServer{stream})
}

type UThings_ConnectSwniChannelServer interface {
	Send(*SmartCastResponse) error
	Recv() (*SmartCastRequest, error)
	grpc.ServerStream
}

type uThingsConnectSwniChannelServer struct {
	grpc.ServerStream
}

func (x *uThingsConnectSwniChannelServer) Send(m *SmartCastResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uThingsConnectSwniChannelServer) Recv() (*SmartCastRequest, error) {
	m := new(SmartCastRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UThings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCtemplate.UThings",
	HandlerType: (*UThingsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectSwniChannel",
			Handler:       _UThings_ConnectSwniChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloProto.proto",
}

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	// Echos a message
	Echo(ctx context.Context, opts ...grpc.CallOption) (Echo_EchoClient, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongReply, error)
}

type echoClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoClient(cc grpc.ClientConnInterface) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, opts ...grpc.CallOption) (Echo_EchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Echo_serviceDesc.Streams[0], "/gRPCtemplate.Echo/Echo", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoEchoClient{stream}
	return x, nil
}

type Echo_EchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoReply, error)
	grpc.ClientStream
}

type echoEchoClient struct {
	grpc.ClientStream
}

func (x *echoEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoEchoClient) Recv() (*EchoReply, error) {
	m := new(EchoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongReply, error) {
	out := new(PongReply)
	err := c.cc.Invoke(ctx, "/gRPCtemplate.Echo/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	// Echos a message
	Echo(Echo_EchoServer) error
	Ping(context.Context, *PingRequest) (*PongReply, error)
}

// UnimplementedEchoServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (*UnimplementedEchoServer) Echo(srv Echo_EchoServer) error {
	return status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedEchoServer) Ping(ctx context.Context, req *PingRequest) (*PongReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).Echo(&echoEchoServer{stream})
}

type Echo_EchoServer interface {
	Send(*EchoReply) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoEchoServer struct {
	grpc.ServerStream
}

func (x *echoEchoServer) Send(m *EchoReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Echo_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPCtemplate.Echo/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCtemplate.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Echo_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Echo",
			Handler:       _Echo_Echo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloProto.proto",
}
